/* ============
 * State of the auth module
 * ============
 *
 * The initial state of the auth module.
 */

export default {
    goods: {
        loading: true,
        items: [
            {"title":"Title","desc":"Метод Object.assign() копирует из исходных объектов в целевой объект только перечисляемые и собственные свойства. Он использует внутренний метод [[Get]] на исходных объектах и внутренний метод [[Set]] на целевом объекте, так что он также вызывает геттеры и сеттеры. Именно поэтому он присваивает свойства вместо простого копирования или определения новых свойств. Это поведение может сделать метод непригодным для вливания новых свойств в прототип, если вливаемые исходные объекты содержат геттеры. Вместо него для копирования в прототипы определений свойств, включая признак их перечисляемости, следует использовать методы Object.getOwnPropertyDescriptor() и Object.defineProperty().","price":"12","image":"https://bluewater.co.uk/sites/bluewater/files/styles/whats_on_gallery_large/public/images/shops/gallery/sweets-from-heaven_2_1600x1600.jpg?itok=7ce2I3Vo","display":true},
            {"title":"Title","desc":"Метод Object.assign() копирует из исходных объектов в целевой объект только перечисляемые и собственные свойства. Он использует внутренний метод [[Get]] на исходных объектах и внутренний метод [[Set]] на целевом объекте, так что он также вызывает геттеры и сеттеры. Именно поэтому он присваивает свойства вместо простого копирования или определения новых свойств. Это поведение может сделать метод непригодным для вливания новых свойств в прототип, если вливаемые исходные объекты содержат геттеры. Вместо него для копирования в прототипы определений свойств, включая признак их перечисляемости, следует использовать методы Object.getOwnPropertyDescriptor() и Object.defineProperty().","price":"12","image":"https://www.placeoforigin.in/media/catalog/product/cache/1/image/1200x1200/c76ea3ffbe4a25484f8eac86ff255564/s/w/sweea292.jpg","display":true},
{"title":"Title","desc":"Метод Object.assign() копирует из исходных объектов в целевой объект только перечисляемые и собственные свойства. Он использует внутренний метод [[Get]] на исходных объектах и внутренний метод [[Set]] на целевом объекте, так что он также вызывает геттеры и сеттеры. Именно поэтому он присваивает свойства вместо простого копирования или определения новых свойств. Это поведение может сделать метод непригодным для вливания новых свойств в прототип, если вливаемые исходные объекты содержат геттеры. Вместо него для копирования в прототипы определений свойств, включая признак их перечисляемости, следует использовать методы Object.getOwnPropertyDescriptor() и Object.defineProperty().","price":"12","image":"https://bluewater.co.uk/sites/bluewater/files/styles/whats_on_gallery_large/public/images/shops/gallery/sweets-from-heaven_2_1600x1600.jpg?itok=7ce2I3Vo","display":true},
            {"title":"Title","desc":"Метод Object.assign() копирует из исходных объектов в целевой объект только перечисляемые и собственные свойства. Он использует внутренний метод [[Get]] на исходных объектах и внутренний метод [[Set]] на целевом объекте, так что он также вызывает геттеры и сеттеры. Именно поэтому он присваивает свойства вместо простого копирования или определения новых свойств. Это поведение может сделать метод непригодным для вливания новых свойств в прототип, если вливаемые исходные объекты содержат геттеры. Вместо него для копирования в прототипы определений свойств, включая признак их перечисляемости, следует использовать методы Object.getOwnPropertyDescriptor() и Object.defineProperty().","price":"12","image":"https://www.placeoforigin.in/media/catalog/product/cache/1/image/1200x1200/c76ea3ffbe4a25484f8eac86ff255564/s/w/sweea292.jpg","display":true},
{"title":"Title","desc":"Метод Object.assign() копирует из исходных объектов в целевой объект только перечисляемые и собственные свойства. Он использует внутренний метод [[Get]] на исходных объектах и внутренний метод [[Set]] на целевом объекте, так что он также вызывает геттеры и сеттеры. Именно поэтому он присваивает свойства вместо простого копирования или определения новых свойств. Это поведение может сделать метод непригодным для вливания новых свойств в прототип, если вливаемые исходные объекты содержат геттеры. Вместо него для копирования в прототипы определений свойств, включая признак их перечисляемости, следует использовать методы Object.getOwnPropertyDescriptor() и Object.defineProperty().","price":"12","image":"https://bluewater.co.uk/sites/bluewater/files/styles/whats_on_gallery_large/public/images/shops/gallery/sweets-from-heaven_2_1600x1600.jpg?itok=7ce2I3Vo","display":true},
            {"title":"Title","desc":"Метод Object.assign() копирует из исходных объектов в целевой объект только перечисляемые и собственные свойства. Он использует внутренний метод [[Get]] на исходных объектах и внутренний метод [[Set]] на целевом объекте, так что он также вызывает геттеры и сеттеры. Именно поэтому он присваивает свойства вместо простого копирования или определения новых свойств. Это поведение может сделать метод непригодным для вливания новых свойств в прототип, если вливаемые исходные объекты содержат геттеры. Вместо него для копирования в прототипы определений свойств, включая признак их перечисляемости, следует использовать методы Object.getOwnPropertyDescriptor() и Object.defineProperty().","price":"12","image":"https://www.placeoforigin.in/media/catalog/product/cache/1/image/1200x1200/c76ea3ffbe4a25484f8eac86ff255564/s/w/sweea292.jpg","display":true},

        ]
    }
};
